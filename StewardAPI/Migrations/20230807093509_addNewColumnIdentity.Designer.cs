// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StewardAPI.Data;

#nullable disable

namespace StewardAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230807093509_addNewColumnIdentity")]
    partial class addNewColumnIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "de4ccc9c-2743-4c14-aa50-394d66c3b17b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ba4026c4-1f90-478d-9b0f-dbee61cdb2cc",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6dc88e5f-a2d0-4c04-a924-ef77c66e8586",
                            RoleId = "ba4026c4-1f90-478d-9b0f-dbee61cdb2cc"
                        },
                        new
                        {
                            UserId = "de011084-6d9a-4ed0-8e0c-fd7f96fdc689",
                            RoleId = "de4ccc9c-2743-4c14-aa50-394d66c3b17b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.CityList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CityList", (string)null);
                });

            modelBuilder.Entity("Model.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Diagnosisname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("diagnosisname");

                    b.HasKey("Id");

                    b.ToTable("diagnosis", (string)null);
                });

            modelBuilder.Entity("Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fees")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Model.GenComplaintsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenComplaintsList", (string)null);
                });

            modelBuilder.Entity("Model.GenDiagnosisList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenDiagnosisList", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Diagnosis = "ABD DISTENTION OCCASIONALLY"
                        },
                        new
                        {
                            Id = 2,
                            Diagnosis = "ABDOMEN"
                        },
                        new
                        {
                            Id = 3,
                            Diagnosis = "ABDOMINAL CRAMPS"
                        },
                        new
                        {
                            Id = 4,
                            Diagnosis = "ACUTE RETENTION OF URINE TWICE"
                        },
                        new
                        {
                            Id = 5,
                            Diagnosis = "ACUTE RESPIRATORY TRACT INFECTION"
                        },
                        new
                        {
                            Id = 6,
                            Diagnosis = "ACUTE CHEST PAIN"
                        },
                        new
                        {
                            Id = 7,
                            Diagnosis = "ACUTE RHINITIS"
                        },
                        new
                        {
                            Id = 8,
                            Diagnosis = "ACUTE KIDNEY INJURY"
                        },
                        new
                        {
                            Id = 9,
                            Diagnosis = "ACUTE GASTROENTERITIS"
                        },
                        new
                        {
                            Id = 10,
                            Diagnosis = "ACUTE LOW BACK PAIN"
                        },
                        new
                        {
                            Id = 11,
                            Diagnosis = "ACUTE RHINOSINUSITIS"
                        },
                        new
                        {
                            Id = 12,
                            Diagnosis = "ACUTE BRONCHITIS"
                        },
                        new
                        {
                            Id = 13,
                            Diagnosis = "ACUTE ABDOMINAL PAIN"
                        },
                        new
                        {
                            Id = 14,
                            Diagnosis = "Acne"
                        },
                        new
                        {
                            Id = 15,
                            Diagnosis = "ACID ERUCTATION ACID PEPTIC DISEASE ACIDITY"
                        },
                        new
                        {
                            Id = 16,
                            Diagnosis = "ACANTHOSIS NIGRICANS"
                        },
                        new
                        {
                            Id = 17,
                            Diagnosis = "ACHE ACHYMOSIS"
                        },
                        new
                        {
                            Id = 18,
                            Diagnosis = "ACNE VULGARIS"
                        },
                        new
                        {
                            Id = 19,
                            Diagnosis = "ACROMEGALY"
                        },
                        new
                        {
                            Id = 20,
                            Diagnosis = "ACUTE BRONCHITIS"
                        },
                        new
                        {
                            Id = 21,
                            Diagnosis = "ACUTE CHEST PAIN"
                        },
                        new
                        {
                            Id = 23,
                            Diagnosis = "ACUTE DIARRHOEA"
                        },
                        new
                        {
                            Id = 24,
                            Diagnosis = "ACUTE EXACERBATION"
                        },
                        new
                        {
                            Id = 25,
                            Diagnosis = "ACUTE FEBRILE ILLNESS"
                        },
                        new
                        {
                            Id = 26,
                            Diagnosis = "ACUTE GASTROENTERITIS"
                        },
                        new
                        {
                            Id = 27,
                            Diagnosis = "ACUTE GASTRITIS"
                        },
                        new
                        {
                            Id = 28,
                            Diagnosis = "ACUTE KIDNEY INJURY"
                        },
                        new
                        {
                            Id = 29,
                            Diagnosis = "ACUTE LOW BACK PAIN"
                        },
                        new
                        {
                            Id = 30,
                            Diagnosis = "ACUTE OTITIS EXTERNA"
                        },
                        new
                        {
                            Id = 31,
                            Diagnosis = "ACUTE RETENTION OF URINE TWICE"
                        },
                        new
                        {
                            Id = 32,
                            Diagnosis = "ACUTE RESPIRATORY TRACT INFECTION"
                        },
                        new
                        {
                            Id = 33,
                            Diagnosis = "ACUTE RHINITIS"
                        },
                        new
                        {
                            Id = 34,
                            Diagnosis = "ACUTE RHINOSINUSITIS"
                        },
                        new
                        {
                            Id = 35,
                            Diagnosis = "ACUTE VERTIGO"
                        },
                        new
                        {
                            Id = 36,
                            Diagnosis = "ADMIT"
                        },
                        new
                        {
                            Id = 37,
                            Diagnosis = "AEROPHAGIA"
                        },
                        new
                        {
                            Id = 38,
                            Diagnosis = "AFTER DEFECATION"
                        },
                        new
                        {
                            Id = 39,
                            Diagnosis = "AFEBRILE"
                        },
                        new
                        {
                            Id = 40,
                            Diagnosis = "AGGRESSIVE"
                        },
                        new
                        {
                            Id = 41,
                            Diagnosis = "AGITATED DEPRESSION"
                        },
                        new
                        {
                            Id = 42,
                            Diagnosis = "AGGRESSION"
                        },
                        new
                        {
                            Id = 43,
                            Diagnosis = "AGITATION"
                        },
                        new
                        {
                            Id = 44,
                            Diagnosis = "AGORAPHOBIA"
                        },
                        new
                        {
                            Id = 45,
                            Diagnosis = "AGGRESSION LESS"
                        },
                        new
                        {
                            Id = 46,
                            Diagnosis = "AHO RTA"
                        },
                        new
                        {
                            Id = 47,
                            Diagnosis = "AID TYPE 1"
                        },
                        new
                        {
                            Id = 48,
                            Diagnosis = "AIR HUNGER"
                        },
                        new
                        {
                            Id = 49,
                            Diagnosis = "AID TYPE 2"
                        },
                        new
                        {
                            Id = 50,
                            Diagnosis = "ALBUMINURIA"
                        },
                        new
                        {
                            Id = 51,
                            Diagnosis = "ALCHOL INTAKE DAILY"
                        },
                        new
                        {
                            Id = 52,
                            Diagnosis = "ALCOHOLIC"
                        },
                        new
                        {
                            Id = 53,
                            Diagnosis = "ALLERGY"
                        },
                        new
                        {
                            Id = 54,
                            Diagnosis = "ALLERGIC WHOLE BODY RASHES"
                        },
                        new
                        {
                            Id = 55,
                            Diagnosis = "ALLERGIC BRONCHITIS"
                        },
                        new
                        {
                            Id = 56,
                            Diagnosis = "ALLERGIC CONJUNCTIVITIS"
                        },
                        new
                        {
                            Id = 57,
                            Diagnosis = "ALLERGIC RHINITIS"
                        },
                        new
                        {
                            Id = 58,
                            Diagnosis = "ALLERGIC RASHES"
                        },
                        new
                        {
                            Id = 59,
                            Diagnosis = "ALLERGIC COUGH"
                        },
                        new
                        {
                            Id = 60,
                            Diagnosis = "ALOPECIA"
                        },
                        new
                        {
                            Id = 61,
                            Diagnosis = "ALTERNATING CONSTIPATENT"
                        },
                        new
                        {
                            Id = 62,
                            Diagnosis = "ALTERED TASTE"
                        },
                        new
                        {
                            Id = 63,
                            Diagnosis = "ALTERATION OF TASTE"
                        },
                        new
                        {
                            Id = 64,
                            Diagnosis = "ALTERED BOWEL HABIT"
                        },
                        new
                        {
                            Id = 65,
                            Diagnosis = "ALTERED SENSORIUM"
                        },
                        new
                        {
                            Id = 66,
                            Diagnosis = "ALTERED VOICE"
                        },
                        new
                        {
                            Id = 67,
                            Diagnosis = "ALTERED SLEEP"
                        },
                        new
                        {
                            Id = 68,
                            Diagnosis = "AMPTATION BELOW KNEE"
                        },
                        new
                        {
                            Id = 69,
                            Diagnosis = "AMOTIVATION"
                        },
                        new
                        {
                            Id = 70,
                            Diagnosis = "AMENORRHEA"
                        },
                        new
                        {
                            Id = 71,
                            Diagnosis = "AMNESIA"
                        },
                        new
                        {
                            Id = 72,
                            Diagnosis = "ANAEMIA"
                        },
                        new
                        {
                            Id = 73,
                            Diagnosis = "ANAL ITCHING"
                        },
                        new
                        {
                            Id = 74,
                            Diagnosis = "ANAL BURNING"
                        },
                        new
                        {
                            Id = 75,
                            Diagnosis = "ANASARCA"
                        },
                        new
                        {
                            Id = 76,
                            Diagnosis = "ANAL FISSURE"
                        },
                        new
                        {
                            Id = 77,
                            Diagnosis = "ANAL PAIN"
                        },
                        new
                        {
                            Id = 78,
                            Diagnosis = "ANDROGENETIC ALOPECIA"
                        },
                        new
                        {
                            Id = 79,
                            Diagnosis = "ANEMIA"
                        },
                        new
                        {
                            Id = 80,
                            Diagnosis = "ANERGIA"
                        },
                        new
                        {
                            Id = 81,
                            Diagnosis = "ANGER"
                        },
                        new
                        {
                            Id = 82,
                            Diagnosis = "ANGINA"
                        },
                        new
                        {
                            Id = 83,
                            Diagnosis = "ANHEDONIA"
                        },
                        new
                        {
                            Id = 84,
                            Diagnosis = "ANKLE SWELLING"
                        },
                        new
                        {
                            Id = 85,
                            Diagnosis = "ANKLE JOINT PAIN"
                        },
                        new
                        {
                            Id = 86,
                            Diagnosis = "ANKLE PAIN"
                        },
                        new
                        {
                            Id = 87,
                            Diagnosis = "ANKLE INJURY"
                        });
                });

            modelBuilder.Entity("Model.GenMedicinesList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Medicines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenMedicinesList", (string)null);
                });

            modelBuilder.Entity("Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("City")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int>("Opdfess")
                        .HasColumnType("int");

                    b.Property<string>("Opdtype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int?>("Uhid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DoctorId" }, "IX_Patient_DoctorId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Model.PatientAdvise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Uhid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PatientAdvise", (string)null);
                });

            modelBuilder.Entity("Model.PatientComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Uhid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PatientComplaints");
                });

            modelBuilder.Entity("Model.PatientDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Complaintname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Uhid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PatientDiagnosis", (string)null);
                });

            modelBuilder.Entity("Model.PatientInvestigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InvestigationName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<int?>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Uhid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PatientInvestigation", (string)null);
                });

            modelBuilder.Entity("Model.PatientMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Datetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("duration");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("frequency");

                    b.Property<string>("Medicines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("Uhid")
                        .HasColumnType("int");

                    b.Property<string>("WhenTake")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("when_take");

                    b.HasKey("Id");

                    b.ToTable("PatientMedicine", (string)null);
                });

            modelBuilder.Entity("StewardAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "de011084-6d9a-4ed0-8e0c-fd7f96fdc689",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a28227d3-c3af-4268-a644-1c9545fb65d8",
                            Email = "vikasmalik8881@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vikas",
                            HospitalID = "Vikas0001",
                            LastName = "Malik",
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKASMALIK8881@GMAIL.COM",
                            NormalizedUserName = "VIKASMALIK8881@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTjrk2h/Z0go8eBgQ1dSjqhBMa1mATLTZZejk9UjLX5CWeraB4iu+epp+EgQKVr+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05ae5191-2d7a-452a-95bc-c0ae4ec75cf0",
                            TwoFactorEnabled = false,
                            UserName = "vikasmalik8881@gmail.com"
                        },
                        new
                        {
                            Id = "6dc88e5f-a2d0-4c04-a924-ef77c66e8586",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7caeb4b-9243-446f-860e-963edb789213",
                            Email = "Vmalik@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vikas",
                            HospitalID = "Vikas0002",
                            LastName = "Malik",
                            LockoutEnabled = false,
                            NormalizedEmail = "VMALIK@GMAIL.COM",
                            NormalizedUserName = "VMALIK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQKOReDobusUFiEJKtPAKfaD/Yg1B+XfgSjCwT7uUfzdTw058nEvg2QQgJNjc8Pnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1d9ef26-5e6b-435f-9b33-8ff74970a497",
                            TwoFactorEnabled = false,
                            UserName = "Vmalik@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StewardAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StewardAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StewardAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StewardAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Patient", b =>
                {
                    b.HasOne("Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Model.Doctor", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
